USE [OperationsManagerDW]
GO
/****** Object:  StoredProcedure [apm].[SummaryPerformanceAnalysisReport]    Script Date: 4/3/2017 12:20:08 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/************************************************************************************/
/* OBJECT: Stored Procedure                                                         */
/* NAME: SummaryPerformanceAnalysisReport                                           */
/* USED IN: Summary Performance Analysis Report                                     */
/* INPUT PARAMETERS:                                                                */
/*      @STARTDATE - Start date of the priod                                        */
/*      @ENDDATE - End date of the period                                           */
/*      @SOURCEIDS - List of source Id, separated by comma. Exp: '1,2,3'            */
/*      @MACHINEIDS - List of machine Id, separated by comma. Exp: '4,5,6'          */
/*      @INCLUDESUBNET - Subnet masks list, which should be included                */
/*      @EXCLUDESUBNET - Subnet mask list, which should be excluded                 */
/*      @THRESHOLD - Event threshold                                                */
/*      @ORDERBY - Specifies field to which sorting should be applayed              */
/*                  1. Request Count (temporary obsolete)                           */
/*                  2. Problems Count                                               */
/*                  3. Event Count                                                  */
/*                  4. MAX Event Duration                                           */
/*                  5. AVG Event Duration                                           */
/*                  6. Event Size                                                   */
/************************************************************************************/
ALTER PROCEDURE [apm].[SummaryPerformanceAnalysisReport]
@STARTDATE DATETIME,
@ENDDATE DATETIME,
@SOURCEIDS NVARCHAR(MAX),
@MACHINEIDS NVARCHAR(MAX),
@INCLUDESUBNET NVARCHAR(MAX),
@EXCLUDESUBNET NVARCHAR(MAX),
@THRESHOLD INT,
@PMSTATUS NVARCHAR(50),
@ORDERBY INT 
WITH RECOMPILE
AS
BEGIN    
SET NOCOUNT ON
/****************************************************************************************/
/*                      ASSISTING TEMP TABLES                                           */
/****************************************************************************************/
SELECT    @INCLUDESUBNET = REPLACE(@INCLUDESUBNET, N'*', N'%'),    @EXCLUDESUBNET = REPLACE(@EXCLUDESUBNET, N'*', N'%')
-- Filter table, which contains machine ids and source ids-- typeid defines filter type - 1 for source and 2 for machine-- valueId filter value - source id and machine id CREATE TABLE #SOURCEMACHINEFILTERTABLE(    TYPEID INT,     VALUEID INT)
-- Fill table #SOURCEMACHINEFILTERTABLEINSERT     INTO #SOURCEMACHINEFILTERTABLE        SELECT             p.typeId AS TYPEID,            CAST(p.value AS INT) AS VALUEID        FROM             --GetMultiParameters function splits incoming strings. It uses comma as substring delimiter             APM.GetMultiParameters(@SOURCEIDS, @MACHINEIDS) AS p 
-- Filter table for SubnetC valuesCREATE TABLE #SUBNETCFILTERTABLE(    IPID INT)
-- Insert into filter id of the SubnetC to increase performence for event tableINSERT INTO #SUBNETCFILTERTABLESELECT DISTINCT    ipidFROM    IP AS ip (NOLOCK)    JOIN APM.GetMultiParameters(CASE WHEN LEN(@INCLUDESUBNET) > 0 THEN @INCLUDESUBNET ELSE N'%' END, N'') AS p1 ON (ip.SubnetC LIKE p1.Value)    LEFT OUTER JOIN APM.GetMultiParameters(CASE WHEN LEN(@EXCLUDESUBNET) > 0 THEN @EXCLUDESUBNET ELSE N'Fake' END, N'') AS p2 ON (ip.SubnetC LIKE p2.Value)WHERE--Exclude subnets which have correspondance in @EXCLUDESUBNET parameter    p2.typeId IS NULL
-- Filter table, which contains PM Statuses of EventsCREATE TABLE #PMSTATUSFILTERTABLE(    VALUEID INT)
-- Fill table #PMSTATUSFILTERTABLEINSERT     INTO #PMSTATUSFILTERTABLE        SELECT             CAST(p.value AS INT) AS VALUEID        FROM             --GetMultiParameters function splits incoming strings. It uses comma as substring delimiter             APM.GetMultiParameters(@PMSTATUS, N'') AS p        CREATE TABLE #CLIENTEVENT (    CSEVENTID INT,    CSEVENTGROUPID INT,    EVENTCLASS NVARCHAR(50),    SOURCEID INT)
INSERT INTO #CLIENTEVENTSELECT    e.CSEVENTID,    e.CSEVENTGROUPID,    e.EVENTCLASS,    e.SOURCEIDFROM    APM.CSEvent (NOLOCK) AS e    JOIN #SOURCEMACHINEFILTERTABLE AS f1 ON (f1.VALUEID = e.SourceId AND f1.TYPEID = 1)    JOIN #SOURCEMACHINEFILTERTABLE AS f2 ON (f2.VALUEID = e.MachineId AND f2.TYPEID = 2)    JOIN #SUBNETCFILTERTABLE AS f3 ON e.ipid = f3.IPID JOIN #PMSTATUSFILTERTABLE AS f4 ON (f4.VALUEID = e.PMStatus)     WHERE     e.ClassType = N'Performance'     AND e.UTCDate >= @STARTDATE    AND e.UTCDate < @ENDDATE
/****************************************************************************************************************//*                                          MAIN QUERY                                                          *//****************************************************************************************************************/;WITH AJAXEvents AS(    SELECT        E.CSEVENTID,        SUM(COALESCE(ajax.REQUESTSIZE, 0))+ SUM(COALESCE(ajax.ResponseSize, 0)) AS AjaxSize,         -- This field will be used only for Asynch Ajax, and for Asycnch Ajax CSAJAX table         -- contains only one row for each event, so sum doesn't make any difference        SUM(ajax.TotalTime) AS TotalTime    FROM        #CLIENTEVENT AS e        JOIN APM.CSAJAX AS ajax ON e.CSEVENTID = ajax.CSEventId    GROUP BY        e.CSEVENTID        ),CSEvents AS(    SELECT         e.CSEVENTID,        e.CSEVENTGROUPID,        e.SOURCEID,        js.CSEventId AS JavaScriptEventId,        (CASE WHEN ((js.CSEventId IS NULL) AND (e.EVENTCLASS =N'CSMAMonitorLog')) THEN e.CSEVENTID ELSE NULL END) AS AsyncAjaxEventId,        (CASE WHEN ((js.CSEventId IS NULL) AND (e.EVENTCLASS =N'CSMPMonitorLog')) THEN e.CSEVENTID ELSE NULL END) AS PageEventId,        COALESCE(pe.TotalTime, COALESCE(js.TotalTime, ajax.TotalTime)) AS EventDuration,        COALESCE(pe.TotalSize, ajax.AjaxSize) AS EventSize    FROM         #CLIENTEVENT AS e        LEFT OUTER JOIN APM.CSJSCRIPTEVENT AS js (NOLOCK) ON js.CSEventId  = e.CSEVENTID         LEFT OUTER JOIN AJAXEvents AS ajax (NOLOCK) ON ajax.CSEventId = e.CSEVENTID        LEFT OUTER JOIN APM.CSPAGEEVENT AS pe (NOLOCK) ON pe.CSEventId = e.CSEVENTID),SourceStat AS(    SELECT         SourceId,        COUNT(JavaScriptEventId) AS JavaScriptEventCount,        COUNT(AsyncAjaxEventId) AS AsyncAjaxEventCount,        COUNT(PageEventId) AS PageEventCount,        COUNT(CSEventId) AS EventCount,        COUNT(DISTINCT CSEventGroupId) AS ProblemsCount,        MAX(EventDuration) AS MAXEventDuration,        AVG(EventDuration) AS AVGEventDuration,        AVG(EventSize) AS EventSize    FROM         CSEvents    WHERE        EventDuration / 1000.0 >= @THRESHOLD    GROUP BY        SourceId),NumberedSources AS(    SELECT         ROW_NUMBER() OVER(ORDER BY (CASE @ORDERBY            WHEN 2 THEN e.ProblemsCount            WHEN 3 THEN e.EventCount            WHEN 4 THEN e.MAXEventDuration            WHEN 5 THEN e.AVGEventDuration            WHEN 6 THEN e.EventSize        END) DESC) Id,         e.SourceId,        s.Source,        e.JavaScriptEventCount,        e.AsyncAjaxEventCount,        e.PageEventCount,        e.EventCount,        e.ProblemsCount,        e.MAXEventDuration/1000.0 AS MAXEventDuration,        e.AVGEventDuration/1000.0 AS AVGEventDuration,        -- Temporary obsolete field, return appropriate value, than it will be returned        1 AS requestCount,        e.EventSize/1024.0 AS EventSize,        SUM(e.EventCount) OVER() AS TotalEventCount    FROM        SourceStat AS e        JOIN APM.Source AS s (NOLOCK) ON e.SourceId = s.SourceId)SELECT TOP (10) *FROM    NumberedSourcesEND
